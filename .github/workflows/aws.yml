on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

name: purbeurre CI on ECR

jobs:

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7, 3.9]


    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt

    - name: Create .env.prod file
      run: |
        touch .env.prod
        echo DEBUG=${{ secrets.DEBUG }} >> .env.prod
        echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env.prod
        echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .env.prod
        echo SQL_ENGINE=${{ secrets.SQL_ENGINE }} >> .env.prod
        echo SQL_DATABASE=${{ secrets.SQL_DATABASE }} >> .env.prod
        echo SQL_USER=${{ secrets.SQL_USER }} >> .env.prod
        echo SQL_PASSWORD=${{ secrets.SQL_PASSWORD }} >> .env.prod
        echo SQL_HOST=${{ secrets.SQL_HOST }} >> .env.prod
        echo DATABASE=${{ secrets.DATABASE }} >> .env.prod
        echo VIRTUAL_HOST=${{ secrets.VIRTUAL_HOST }} >> .env.prod
        echo VIRTUAL_PORT=${{ secrets.VIRTUAL_PORT }} >> .env.prod
        echo VARIABLE=${{ secrets.VARIABLE }} >> .env.prod
        echo LETSENCRYPT_HOST=${{ secrets.LETSENCRYPT_HOST }} >> .env.prod
    
    - name: Create .env.prod.db file
      run: |
        touch .env.prod.db
        echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env.prod.db
        echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env.prod.db
        echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env.prod.db

    - name: Create .env.prod.proxy-companion
      run: |
        touch .env.prod.proxy-companion
        echo DEFAULT_EMAIL=${{ secrets.DEFAULT_EMAIL }} >> .env.prod.proxy-companion
        echo NGINX_PROXY_CONTAINER=${{ secrets.NGINX_PROXY_CONTAINER }} >> .env.prod.proxy-companion


    - name: Run Tests
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: |
        cd app
        python manage.py test

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: 1
      run: |
        # Build a docker container and push it to ECR 
        docker-compose -f docker-compose.prod.yml build
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:web
        # echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:web"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:nginx-proxy
        # echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:nginx:proxy"